NAME := sonar
SRC := $(NAME).c hc-sr04.c

MFLAGS =  --no-print-directory 
# MAKEFLAGS += --warn-undefined-variables

# $(wildcard ./*.c)

ifndef CS240LX_2021_PATH
$(error CS240LX_2021_PATH is not set: this should contain the absolute path to where this directory is.  Define it in your shell's initialiation.  For example, .tcshrc for tcsh or .bashrc for bash)
endif

# where libpi is.
LPI = $(CS140E_PATH)/libpi

# where the fake lib pi is
FLPI = $(CS240LX_2021_PATH)/libpi-fake

# where libunix is.
LUNIX = $(CS240LX_2021_PATH)/libunix/

CC=gcc
CFLAGS = -Wall -g -Og -std=gnu99  -Werror -Wno-unused-function 
CFLAGS += -I$(LPI) -I$(LUNIX) -DRPI_UNIX -I$(FLPI)  -I$(CS240LX_2021_PATH)/libunix 


# test lib
TLIB_HL = $(FLPI)/libpi-fake.hl.a
TLIB_LL = $(FLPI)/libpi-fake.ll.a

# make fake lib pi first, then progs
all: libfake $(NAME).hl.fake  $(NAME).ll.fake run

# don't worry about deps: always run make
libfake:
	make -C $(FLPI)

#################################################################
# we manually list out every target and run command to try to keep
# the Makefile understdandable and hard to screw up.
# 
# <TLIB> will get triggered if anything changes, so we don't need any
# other dependencies

# we don't want .o b/c will hit the pi stuff.
$(NAME).hl.fake: $(SRC) $(TLIB_HL)
	$(CC) $(CFLAGS) -DFAKE_HIGH_LEVEL $(SRC) -o $@ $(TLIB_HL)

$(NAME).ll.fake: $(SRC) $(TLIB_LL)
	$(CC) $(CFLAGS) -DFAKE_LOW_LEVEL $(SRC) -o $@ $(TLIB_LL)

clean:
	rm -f *.o *~  *.bak $(NAME)  blink $(NAME).hl.fake   $(NAME).ll.fake
	make -C $(FLPI) clean

run:
	./$(NAME).ll.fake | cksum
	./$(NAME).hl.fake | cksum

.PHONY: all clean libfake
